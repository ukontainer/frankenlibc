diff --git a/musl/arch/aarch64-darwin b/musl/arch/aarch64-darwin
new file mode 120000
index 00000000..ec418419
--- /dev/null
+++ b/musl/arch/aarch64-darwin
@@ -0,0 +1 @@
+aarch64
\ No newline at end of file
diff --git a/musl/arch/aarch64/bits/limits.h b/musl/arch/aarch64/bits/limits.h
index 0226588c..86ef7663 100644
--- a/musl/arch/aarch64/bits/limits.h
+++ b/musl/arch/aarch64/bits/limits.h
@@ -1,5 +1,6 @@
 #if defined(_POSIX_SOURCE) || defined(_POSIX_C_SOURCE) \
  || defined(_XOPEN_SOURCE) || defined(_GNU_SOURCE) || defined(_BSD_SOURCE)
+#define PAGESIZE 4096
 #define LONG_BIT 64
 #endif
 
diff --git a/musl/arch/aarch64/crt_arch.h b/musl/arch/aarch64/crt_arch.h
index b64fb3dd..17219414 100644
--- a/musl/arch/aarch64/crt_arch.h
+++ b/musl/arch/aarch64/crt_arch.h
@@ -1,3 +1,4 @@
+#ifndef __APPLE__
 __asm__(
 ".text \n"
 ".global " START "\n"
@@ -13,3 +14,15 @@ START ":\n"
 "	and sp, x0, #-16\n"
 "	b " START "_c\n"
 );
+#else
+__asm__(
+".text \n"
+".global " START "\n"
+START ":\n"
+"	mov x29, #0\n"
+"	mov x30, #0\n"
+"	mov x0, sp\n"
+"	and sp, x0, #-16\n"
+"	b " START "_c\n"
+);
+#endif
diff --git a/musl/configure b/musl/configure
index b25dad45..b55c6a63 100755
--- a/musl/configure
+++ b/musl/configure
@@ -315,6 +315,7 @@ printf "%s\n" "$target"
 #
 case "$target" in
 # Catch these early to simplify matching for 32-bit archs
+arm64-apple-darwin*|aarch64-apple-darwin*) ARCH=aarch64-darwin ;;
 arm*) ARCH=arm ;;
 aarch64*) ARCH=aarch64 ;;
 i?86-nt32*) ARCH=nt32 ;;
@@ -371,8 +372,14 @@ fi
 
 LKL_INCLUDE="$srcdir/arch/lkl/src/*.c"
 
-if [[ "$target" = "x86_64-apple-darwin"* ]] ; then
+if [[ "$ARCH" = "x86_64-darwin"* ]] ; then
 LKL_INCLUDE="$LKL_INCLUDE $srcdir/src/setjmp/x86_64/*.s"
+LKL_EXCLUDE="$LKL_EXCLUDE $srcdir/src/setjmp/setjmp.c \
+ $srcdir/src/setjmp/longjmp.c"
+elif [[ "$ARCH" = "aarch64-darwin"* ]] ; then
+LKL_INCLUDE="$LKL_INCLUDE $srcdir/src/setjmp/aarch64-darwin/*.s"
+LKL_EXCLUDE="$LKL_EXCLUDE $srcdir/src/setjmp/setjmp.c \
+ $srcdir/src/setjmp/longjmp.c"
 fi
 
 
@@ -392,7 +399,9 @@ tryflag CFLAGS_C99FSE -ffreestanding \
 || tryflag CFLAGS_C99FSE -fno-builtin
 tryflag CFLAGS_C99FSE -fexcess-precision=standard \
 || { test "$ARCH" = i386 && tryflag CFLAGS_C99FSE -ffloat-store ; }
+if [[ "$ARCH" != "aarch64-darwin"* ]] ; then
 tryflag CFLAGS_C99FSE -frounding-math
+fi
 
 #
 # We may use the may_alias attribute if __GNUC__ is defined, so
@@ -554,7 +563,9 @@ fi
 #
 tryflag CFLAGS_AUTO -Werror=implicit-function-declaration
 tryflag CFLAGS_AUTO -Werror=implicit-int
+if [[ "$ARCH" != "aarch64-darwin"* ]] ; then
 tryflag CFLAGS_AUTO -Werror=pointer-sign
+fi
 tryflag CFLAGS_AUTO -Werror=pointer-arith
 
 #
@@ -744,7 +755,7 @@ if $CC $CFLAGS_C99FSE \
 printf "yes\n"
 else
 printf "no\n"
-fail "$0: error: unsupported long double type"
+printf "$0: error: unsupported long double type"
 fi
 
 #
diff --git a/musl/crt/aarch64-darwin/crti.s b/musl/crt/aarch64-darwin/crti.s
new file mode 100644
index 00000000..359fcd8a
--- /dev/null
+++ b/musl/crt/aarch64-darwin/crti.s
@@ -0,0 +1,11 @@
+.section __TEXT,.init
+.global _init
+_init:
+	stp x29,x30,[sp,-16]!
+	mov x29,sp
+
+.section __TEXT,.fini
+.global _fini
+_fini:
+	stp x29,x30,[sp,-16]!
+	mov x29,sp
diff --git a/musl/crt/aarch64-darwin/crtn.s b/musl/crt/aarch64-darwin/crtn.s
new file mode 100644
index 00000000..22775d77
--- /dev/null
+++ b/musl/crt/aarch64-darwin/crtn.s
@@ -0,0 +1,7 @@
+.section __TEXT,.init
+	ldp x29,x30,[sp],#16
+	ret
+
+.section __TEXT,.fini
+	ldp x29,x30,[sp],#16
+	ret
diff --git a/musl/src/env/__libc_start_main.c b/musl/src/env/__libc_start_main.c
index c3e73f59..77973e5a 100644
--- a/musl/src/env/__libc_start_main.c
+++ b/musl/src/env/__libc_start_main.c
@@ -65,8 +65,11 @@ void libc_start_init(void)
 {
 	_init();
 	uintptr_t a = (uintptr_t)&__init_array_start;
-	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
+	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)())) {
+		if (*(void (**)(void))a == NULL)
+			continue;
 		(*(void (**)(void))a)();
+	}
 }
 
 weak_alias(libc_start_init, __libc_start_init);
diff --git a/musl/src/exit/exit.c b/musl/src/exit/exit.c
index 5ef34bae..cf4b27c8 100644
--- a/musl/src/exit/exit.c
+++ b/musl/src/exit/exit.c
@@ -20,8 +20,11 @@ weak hidden void (*const __fini_array_start)(void), (*const __fini_array_end)(vo
 void libc_exit_fini(void)
 {
 	uintptr_t a = (uintptr_t)&__fini_array_end;
-	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
+	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)())) {
+		if (*(void (**)())(a-sizeof(void(*)())) == NULL)
+			continue;
 		(*(void (**)())(a-sizeof(void(*)())))();
+	}
 	_fini();
 }
 
diff --git a/musl/src/setjmp/aarch64-darwin/longjmp.s b/musl/src/setjmp/aarch64-darwin/longjmp.s
new file mode 100644
index 00000000..b6945def
--- /dev/null
+++ b/musl/src/setjmp/aarch64-darwin/longjmp.s
@@ -0,0 +1,24 @@
+.global _longjmp
+	.align        4;
+.global longjmp
+	.align        4;
+_longjmp:
+longjmp:
+	// IHI0055B_aapcs64.pdf 5.1.1, 5.1.2 callee saved registers
+	ldp x19, x20, [x0,#0]
+	ldp x21, x22, [x0,#16]
+	ldp x23, x24, [x0,#32]
+	ldp x25, x26, [x0,#48]
+	ldp x27, x28, [x0,#64]
+	ldp x29, x30, [x0,#80]
+	ldr x2, [x0,#104]
+	mov sp, x2
+	ldp d8 , d9, [x0,#112]
+	ldp d10, d11, [x0,#128]
+	ldp d12, d13, [x0,#144]
+	ldp d14, d15, [x0,#160]
+
+	mov x0, x1
+	cbnz x1, 1f
+	mov x0, #1
+1:	br x30
diff --git a/musl/src/setjmp/aarch64-darwin/setjmp.s b/musl/src/setjmp/aarch64-darwin/setjmp.s
new file mode 100644
index 00000000..f78284cc
--- /dev/null
+++ b/musl/src/setjmp/aarch64-darwin/setjmp.s
@@ -0,0 +1,24 @@
+.global __setjmp
+	.align        4;
+.global _setjmp
+	.align        4;
+.global setjmp
+	.align        4;
+__setjmp:
+_setjmp:
+setjmp:
+	// IHI0055B_aapcs64.pdf 5.1.1, 5.1.2 callee saved registers
+	stp x19, x20, [x0,#0]
+	stp x21, x22, [x0,#16]
+	stp x23, x24, [x0,#32]
+	stp x25, x26, [x0,#48]
+	stp x27, x28, [x0,#64]
+	stp x29, x30, [x0,#80]
+	mov x2, sp
+	str x2, [x0,#104]
+	stp  d8,  d9, [x0,#112]
+	stp d10, d11, [x0,#128]
+	stp d12, d13, [x0,#144]
+	stp d14, d15, [x0,#160]
+	mov x0, #0
+	ret
diff --git a/musl/src/thread/aarch64-darwin/syscall_cp.s b/musl/src/thread/aarch64-darwin/syscall_cp.s
new file mode 100644
index 00000000..83a87e0a
--- /dev/null
+++ b/musl/src/thread/aarch64-darwin/syscall_cp.s
@@ -0,0 +1,30 @@
+// __syscall_cp_asm(&self->cancel, nr, u, v, w, x, y, z)
+//                  x0             x1  x2 x3 x4 x5 x6 x7
+
+// syscall(nr, u, v, w, x, y, z)
+//         x8  x0 x1 x2 x3 x4 x5
+
+.global ___cp_begin
+	.align 4
+.global ___cp_end
+	.align 4
+.global ___cp_cancel
+	.align 4
+.global ___syscall_cp_asm
+	.align 4
+___syscall_cp_asm:
+___cp_begin:
+	ldr w0,[x0]
+	cbnz w0,___cp_cancel
+	mov x8,x1
+	mov x0,x2
+	mov x1,x3
+	mov x2,x4
+	mov x3,x5
+	mov x4,x6
+	mov x5,x7
+	svc 0
+___cp_end:
+	ret
+___cp_cancel:
+	b ___cancel
